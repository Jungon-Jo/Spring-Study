웹 개발
- Client와 Server

Client		-> url(http로 request)			Server

웹 브라우저						웹 서버(아파치)					: 정적(jpg, png/그림파일, html 문서, CSS, JS Source...) 서비스 처리(화면에 보여주기 정도의 서비스)/속도를 높이는데 큰 영향은 없지만, 정적 데이터를 굳이 동적 서비스 처리로 할 필요는 없다.
(컴파일 : html, CSS, JS)
ID 입력 : 유효성 체크(JS 정규식/서버의 효율을 높여준다(서버의 부담을 줄여준다.))							  
							WAS(톰캣)						: 동적(데이터베이스 정보) 서비스 처리/속도를 높이고 싶다면, 동적 데이터 처리를 위한 코드 구현이 중요
							Framework(Spring Legacy/현재 우리가 배우고 있는것, Spring Boot)	: 컨트롤러(request 분석), View(클라이언트의 응답화면★) Template(View Template 언어 종류 : JSP, 타임리프/html 파일로 랜더링 해준다.)/데이터 자료 객체(DTO/Java 언어)를 DB로 부터 가져온다. -> html에서 인식을 하지 못하므로, JSP에서 html로 변환(랜더링) 시켜주는 역할을 한다.
비밀번호 확인 같이 화면을 새로고침(동기 방식)할 필요가 없고 단순 데이터를 띄워 줄때는, int, String, JSON(객체)/데이터만(비동기 방식) 자료를 전송해준다.(API에서 주로 사용(90%)한다.)

웹 브라우저 -> 웹 서버(처리할 정적 데이터가 없다면 바로 다음 단계로 넘어간다.) -> WAS -> 문자열(network 상에서는 모든것이 문자열로 이루어져있다.)로 코드를 웹브라우저에게 주고 컴파일해서 Client에게 보여준다.

1. html에서 태그, id, 클래스, 자식, 자손 등 object 선택
2. 선택한 object에서 value, innertext, innerhtml로 데이터를 조작
3. 새로운 object를 생성해서 문서에 포함(<div></div>안에 새로운 element를 추가하는 것/다른 element를 추가하고 삭제하는 기능을 포함한다.)
4. 비동기 통신 (API 사용 능력)
5. 객체 활용 -> 그래프 그려주는 Library(이미 만들어져 있는 코드)활용(직접 만든다면, 고객의 요구사항을 모두 들어줄 수 있으며, 몸값이 올라간다.)
- 그림파일 같이 src, ref등 url이 사용되는 경우, client가 html 문서를 컴파일 하는 중, 다시 request를 해서 받아온다.(하나의 html 문서를 컴파일 하는동안 수많은 request가 발생 할 수 있다.)

View JS 기능
1. 메뉴 펼치기 기능
2. 메뉴 바 고정
.
.
.

프로젝트때 언급
크롬 개발자 모드 사용하여 문제 해결하는 단서를 얻게 됨
1. element 탐색(노드 탐색 및 선택)
2. html 문서 소스 탐색 및 구조 분석
3. 콘솔 활용 - js간단한 테스팅
4. network - request와 response 과정 분석
	   url, method, code(304, 404)